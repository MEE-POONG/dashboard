// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model UserName {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  username String?
}

model Products {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  productname  String?
  productbrand String?
  productmodel String?
  description  String?
  productcost  String?
  price        String?
  imgFirst     String?
  imgSecond    String?
  imgThird     String?
  imgFourth    String?
  imgFifth     String?
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  categoriesId String?     @db.ObjectId
}

model Categories {
  id      String     @id @default(auto()) @map("_id") @db.ObjectId
  name    String?
  product Products[]
}

model News {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String?
  subtitle String?
  detail   String?
  date     String?
  author   String? //ผู้เขียน
  refer    String? //อ้างอิง
  img      String?
}

model Blog {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  title    String?
  subtitle String?
  detail   String?
  img      String?
  img1     String?
  date     String?
  author   String?
}

model Promote {
  id   String  @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  img  String?
  img1 String?
}

model ReportProduct {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String?
  title    String?
  subtitle String?
}

//*////

model Address {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  lname       String?
  phonenumber String?
  typeaddress String?
  addressline String?
  zipcode     String?
  province    String?
  district    String?
  subdistrict String?
  note        String?

  Appointment Appointment[]
  User        User?         @relation(fields: [userId], references: [id])
  userId      String?       @db.ObjectId
  Repairman   Repairman?    @relation(fields: [repairmanId], references: [id])
  repairmanId String?       @db.ObjectId
}

model Appointment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  fname      String?
  lname      String?
  time       String?
  request    String?
  message    String?
  email      String?
  tel        String?
  url        String?
  status     String?   @default("Wait")
  userId     String?   @db.ObjectId
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt
  deleted_at DateTime? @map("deleted_at")

  repairmanId String?    @db.ObjectId
  Repairman   Repairman? @relation(fields: [repairmanId], references: [id])
  User        User?      @relation(fields: [userId], references: [id])
  Address     Address?   @relation(fields: [addressId], references: [id])
  addressId   String?    @db.ObjectId
}

model Repairman {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  fname    String?
  lname    String?
  email    String?
  tel      String?
  img      String?
  password String?

  Appointment Appointment[]
  Address     Address[]
  createdAt   DateTime?     @default(now())
  updatedAt   DateTime?     @updatedAt
  deleted_at  DateTime?     @map("deleted_at")
}

model User {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  fname           String?
  lname           String?
  birthday        String?
  email           String?
  password        String?
  comfirmPassword String?
  tel             String?
  secretKey       String?
  facebook        String?
  google          String?

  Appointment Appointment[]
  Address     Address[]
}

model About {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  imgLogo     String?
  description String?
  imgbanner   String?
  subtitleOne String?
  subtitleTwo String?
  Address     String?
  email       String?
  phoneOne    String?
  phoneTwo    String?
  FBname      String?
  line        String?
}
